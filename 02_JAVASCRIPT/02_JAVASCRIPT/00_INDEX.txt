9)LET, VAR AND CONST KEYWORDS

LET AND VAR : MAJOR DIFFERNECE IS OF SCOPE, WE CAN ACESS VAR OUTSIDE OF SCOPE BUT WE CANNOT ACESS LET OUTSIDE OF SCOPE.



let a = 10;


var a = 10;


let age = 10;
age = 20;


var age = 10
age = 20;

const age = 10
age = 20








10)PRACTISE QUESTIONS

let a = 10
let age = 23; //23
age + 2;      //25
age;          //23


11)ASSIGMENT OPERATORS : SHORTFORM

1) age = age + 1;
    age += 1
2) age = age - 1;
    age -= 1
3) age = age * 1;
    age *= 1
4) age = age + 1;
    age /= 1


12)unary OPERATORS :
a + b -> here a and b are operands and "+" is OPERATOR

let a = a + 1
a += 1
a++;
a += 1
a += 1
a += 1
a += 1

INCREMENT unary OPERATORS : 
// a++(POST ) :PHELE VALUE USE HOGI PHIR VALUE CHANGE HOGI 
// ++a(PRE)   :PHELE VALUE CHNAGE HOGI PHIR VALUE USE HOGI 





DECREMENT unary OPERATORS : 
a--(POST)
--a(PRE)


////////////////////////////////////////////////////////////////////////////////////////////////////

13)PRACTISE QUESTIONS 


let num = 5;
console.log(num)     

let newNum = num++;
console.log(num)       
console.log(newNum)    


newNum = ++num;
console.log(num)      
console.log(newNum)  

13).2)HOMEWORK : USE ABOVE CODE FOR DECREMENT OPERATOR
 


14)IDENTIFIERS RULES

• Names can contain letters, digits, underscores, and dollar signs. (no space)
• Names must begin with a letter.
• Names can also begin with $
• Names are case sensitive (y and Y are different variables).
Reserved words (like JavaScript keywords) CANNOT be used as names.



CASE : 

1)camelCase : fullName: ITS NOT A RULE BUT TRY TO FOLLOW THIS CASE FOR JS.
2)snake_case : full_name
3)pascalCase : FullName 



15)BOOLEAN IN JS
DEFINATION : BOOLEAN REPRESENT A TRUTH VALUE/FALSE > true or false/yes or no.

let a = true;
a = 10;

typeof
typeof

